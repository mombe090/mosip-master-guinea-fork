# This play installs Postgres and dependent components
#
#
#
#-# Create folder on nfs 
- hosts: nfsserver
  tasks:
    - {name: 'Create folder', file: {name: '{{postgres.nfs_path}}', state: directory}, become: yes}

- hosts: console
  gather_facts: no
  tasks:  # Create logs folder in case no already created
    - {name: 'Create logs folder {{logs_dir}}', file: {name: '{{logs_dir}}', state: directory}}

# Install postgres 
- hosts: console
  vars:
    kube_config: '{{clusters.mz.kube_config}}'
    install_name: 'postgres'
    helm_chart: '{{charts_root}}/postgres'
    is_template: true  
    helm_namespace: 'default'
    helm_values: '{{charts_root}}/postgres/values.template.j2'
  roles:
    - {role:  helm}

  tasks:
    # TODO:  We are waiting here for postgres to settle down. This must be changed to 
    # a better check later
    - name: Waiting for postgres to install completely.
      pause:
        seconds: 30 

# Initialize postgres with data.
# Separate play for init to keep sequence of execution
# First check if postgres is already init. If so, don't init it
- hosts: console
  gather_facts: false
  tasks:
    - name: Check if db already exists. Don't init if it does 
      import_tasks: '../roles/common/tasks/db_exists.yml'
      vars:
        db_name: mosip_kernel  # Just any db. If exists, we will not init

- hosts: console
  vars:
    force_init: false
  roles:  # Run these roles only if db does not exist or if force_init is set to true
     - {role: repos, when: (db_exists == false or force_init|bool == true), tags: [repos]}  # These repos have sql scripts. 
     - {role: postgres-init, when: (db_exists == false or force_init|bool == true),  tags: [postgres-init]} 


